<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python脚本语言的理解（外部类和内部类为何对python不太重要）</title>
      <link href="/2020/02/15/python%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2020/02/15/python%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>这博客一放就是将近半年，想这半年来本来想写篇东西记录一下调试php和js的那些坑，但是后来才发现这些东西都是些碎片化的小知识点，当不得正式记录，其实在日志和文档中摸索，在debug的各种信息查找中，我确实收货了不少经验，而这些经验未必又是纪录得下来的，所以，能开这一篇，我应该感到庆幸，当然也许会被10年后的我嫌弃：“这么垃圾的知识点还要单开一篇文章，是不是傻？”唠嗑就说这么多，下面进入正题。<br><a id="more"></a><br>今天调试python的时候遇到一个问题，主要是关于多线程下类的相互调用，首先介绍一下基本情况。</p><h1 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h1><p>需要在一个已有的类上添加 Watchdog 例程，而该 watchdog 依赖于一个名为 FileEventHandler 的类，在该类中处理中断之后，调用已有的类的方法执行相对应的操作（函数）。在之前，我认为这种情况的解决方法有以下几种：更新全局变量（静态类变量或者是全局变量），传递回调函数。</p><h1 id="往常做法"><a href="#往常做法" class="headerlink" title="往常做法"></a>往常做法</h1><h2 id="更新全局变量"><a href="#更新全局变量" class="headerlink" title="更新全局变量"></a>更新全局变量</h2><h3 id="调用类外全局变量"><a href="#调用类外全局变量" class="headerlink" title="调用类外全局变量"></a>调用类外全局变量</h3><p>在程序运行域中添加全局变量，这是最容易想到，也是最为人不齿的方法，因为这种方法使得一个类调用了它之外的变量，在迁移的时候非常不方便，在 C 等面向过程语言中经常使用。\<br>同理，也可以在全局环境下定义函数，操作已存在的类，而这也是我们一般调用 API 所处在的环境，类对我们都是封装的，直接调用函数即可。</p><h3 id="类的静态变量"><a href="#类的静态变量" class="headerlink" title="类的静态变量"></a>类的静态变量</h3><p>但是我们想要让代码具有高可维护性，那就必须采用面向对象编程。这时我们可以采用类的静态变量（不同语言实现方法不同，但一般都有），这样就可以做到类的封闭性，但是这种情况只适用于一些超参数的配置，当需要使 new 的类的每一个都具有不同的，变量名称相同的变量，这种方法就不适用了。\<br>同理，我们也可以将一些没有动态编译内容的函数以语言所规定的形式将其标注为静态函数，这样就不用创建具体实例而可以直接调用静态方法。这在时间上减少了具体实例的初始化。</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>很多时候，回调函数是一个很好的选择，因为它可以带上类的上下文，直接在一个正在运行的类中修改它的内部信息和调用函数，直接将类的引用传递过去，就可以在新 class 中调用之前创建的类对象的函数了。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>当一个类只在另一个类生存周期内调用，那么可以将其设为内部类，这样就可以互相调用了。</p><h3 id="更高级别架构：-MVP"><a href="#更高级别架构：-MVP" class="headerlink" title="更高级别架构： MVP"></a>更高级别架构： MVP</h3><p>当我们需要互相调用的类实例很多时，就不能单单将其放在主程序中了，而若要对其进行科学的管理，就有必要将其封装成一个类，以类.函数的形式调用，所有类的回调函数都可以放在 presenter 层中，而对应的需要调用的函数就放在 model 层中。</p><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>上式中列出的解决方法似乎可以解决所有调用问题，然而在 Python 的特定环境下，还是会有问题出现。</p><h2 id="Python的继承与Init"><a href="#Python的继承与Init" class="headerlink" title="Python的继承与Init"></a>Python的继承与Init</h2><p>一般情况下，想要实现在 FileEventHandler 的函数中调用，只需要在初始化时传入对应函数类的引用即可，但是 FileEventHandler 是继承于 FileSystemEventHandler ，且需要在 FileEventHandler 的函数中调用 FileSystemEventHandler 的 init 函数，而 Python 的规则是，若要调用父类的 init 函数，则必须保持子类的 init 函数与父类的函数参数一致，这样就无法在初始化的时候将调用类的引用传入，而 init 函数就是类从外界获取参数的唯一地点，这个时候，就遇到问题了。</p><h3 id="对该机制的原因的进一步探究"><a href="#对该机制的原因的进一步探究" class="headerlink" title="对该机制的原因的进一步探究"></a>对该机制的原因的进一步探究</h3><p>这里有时间可以编辑一些</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>还是被之前的静态语言束缚住了手脚，在脚本语言中，完全可以先执行一部分代码后再定义类，这样就能直接在 FileEventHandler 的函数中以主程序的名空间调用之前初始化的实例了。</p><h2 id="不得已而为之的方法"><a href="#不得已而为之的方法" class="headerlink" title="不得已而为之的方法"></a>不得已而为之的方法</h2><p>实际上可以对 lib 文件下手，修改 init 函数，也能解决这一问题，但这样一来就破坏了结构性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop和hbase安装遇到的坑</title>
      <link href="/2019/09/17/hadoop%E5%92%8Chbase%E5%AE%89%E8%A3%85%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2019/09/17/hadoop%E5%92%8Chbase%E5%AE%89%E8%A3%85%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>在服务器上安装hadoop和在hdfs上配置hbase遇到了一些问题，这里做一个总结。<br><a id="more"></a></p><h1 id="No-such-file……用户权限问题"><a href="#No-such-file……用户权限问题" class="headerlink" title="No such file……用户权限问题"></a>No such file……用户权限问题</h1><p>遇到找不到文件，日志中显示无法读取或者运行程序，第一时间应该检查目前用户是否有读写和运行权限。<br>修改文件（夹）所属用户:</p><blockquote><p>   chown [-cfhvR] [–help] [–version] user[:group] file…</p></blockquote><ul><li>user : 新的文件拥有者的使用者 ID</li><li>group : 新的文件拥有者的使用者组(group)</li><li>-c : 显示更改的部分的信息</li><li>-f : 忽略错误信息</li><li>-h :修复符号链接</li><li>-v : 显示详细的处理信息</li><li>-R : 处理指定目录以及其子目录下的所有文件</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><p>修改文件（夹）权限</p><blockquote><p>   chmod [-cfvR] [–help] [–version] mode file…</p></blockquote><p>mode : 权限设定字串，格式如下 :</p><blockquote><p>   [ugoa…][[+-=][rwxX]…][,…]</p><ul><li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li><li>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li><li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li></ul></blockquote><ul><li>-c : 若该文件权限确实已经更改，才显示其更改动作</li><li>-f : 若该文件权限无法被更改也不要显示错误讯息</li><li>-v : 显示权限变更的详细资料</li><li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><h1 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h1><p><strong>如果是租用的服务器，除了系统自带的防火墙外，还可能需要在租用服务器的界面上配置防火墙，巨坑!!</strong></p><h1 id="cannot-find-java…"><a href="#cannot-find-java…" class="headerlink" title="cannot find java…"></a>cannot find java…</h1><p>遇到这一类问题，一律先查看自己的JAVA_HOME环境变量，有的时候即使已经在/etc/profile中配置了环境变量，还需要在hadoop-env.sh,hbase-env.sh中再导入一次，我也无法解释。</p><h1 id="regionserver-HRegionServer-Failed-construction-RegionServer"><a href="#regionserver-HRegionServer-Failed-construction-RegionServer" class="headerlink" title="regionserver.HRegionServer: Failed construction RegionServer"></a>regionserver.HRegionServer: Failed construction RegionServer</h1><p>优先考虑hosts文件的问题，需要在hosts文件中配置</p><blockquote><p>   127.0.0.1 hbase-master</p></blockquote><h1 id="failed-Address-already-in-use"><a href="#failed-Address-already-in-use" class="headerlink" title="failed: Address already in use"></a>failed: Address already in use</h1><p>有人说是因为zookeeper已经启动了，可能是这个原因，但还可能是其他情况，根本解决办法是检查该端口被什么程序占用，并kill掉它。</p><blockquote><p>   netstat -tunpl |grep [端口号]        //查询该端口占用程序的进程ID<br>   ps -ef|grep [ID]                    //查询该进程的详细信息<br>接着就可以选择是关闭服务还是直接kill掉进程了</p></blockquote><h1 id="regionserver-HRegionServer-Failed-construction-RegionServer-1"><a href="#regionserver-HRegionServer-Failed-construction-RegionServer-1" class="headerlink" title="regionserver.HRegionServer: Failed construction RegionServer"></a>regionserver.HRegionServer: Failed construction RegionServer</h1><p>如果是建立在HDFS的HBASE不能照抄官网的配置，修改$HBASE_HOME/conf/hbase-site.xml,要与hadoop的core-site.xml一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><p>需要使用 hdfs://hostname/user 而不是 hdfs://user 。</p><h1 id="bind-xxx-jar-conflict-等类似问题"><a href="#bind-xxx-jar-conflict-等类似问题" class="headerlink" title="bind xxx.jar conflict 等类似问题"></a>bind xxx.jar conflict 等类似问题</h1><p>hadoop和hbase的jar包冲突了，将hbase/lib中的jar包改名或者删除就好了</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初步利用开源facenet框架和已有模型进行人脸识别测试</title>
      <link href="/2019/07/14/%E5%88%9D%E6%AD%A5%E5%88%A9%E7%94%A8%E5%BC%80%E6%BA%90facenet%E6%A1%86%E6%9E%B6%E5%92%8C%E5%B7%B2%E6%9C%89%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/07/14/%E5%88%9D%E6%AD%A5%E5%88%A9%E7%94%A8%E5%BC%80%E6%BA%90facenet%E6%A1%86%E6%9E%B6%E5%92%8C%E5%B7%B2%E6%9C%89%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>tensorflow-gpu这些装上了一直没有用到，现在对其做一个简单的人脸识别测试。<br><a id="more"></a></p><h2 id="配置环境介绍"><a href="#配置环境介绍" class="headerlink" title="配置环境介绍"></a>配置环境介绍</h2><ul><li>tensorflow-gpu 1.13</li><li>scipy</li><li>scikit-learn</li><li>opencv-python</li><li>h5py</li><li>matplotlib</li><li>Pillow</li><li>requests</li><li>psutil</li></ul><h2 id="GitHub上clone-facenet项目"><a href="#GitHub上clone-facenet项目" class="headerlink" title="GitHub上clone facenet项目"></a>GitHub上clone facenet项目</h2><p><code>git clone https://github.com/davidsandberg/facenet.git</code></p><h2 id="下载LFW测试集"><a href="#下载LFW测试集" class="headerlink" title="下载LFW测试集"></a>下载LFW测试集</h2><p>LFW 是由美国马萨诸塞大学阿姆斯特分校计算机视觉实验室整理的。它包含13233张图片，共5749人，其中4096人只有一张图片，1680人的图片多余一张，每张图片尺寸是250x250。<br>将测试集保存至 facenet/data/lfw_data/lfw 目录中.<br>可以在大学网页 (<a href="http://vis-www.cs.umass.edu/lfw/" target="_blank" rel="noopener">http://vis-www.cs.umass.edu/lfw/</a>)  -&gt;Menu-&gt;Download-&gt;All images as gzipped tar file 中下载<br>也可以在facenet官方给出的地址(<a href="http://vis-www.cs.umass.edu/lfw/lfw.tgz)下载" target="_blank" rel="noopener">http://vis-www.cs.umass.edu/lfw/lfw.tgz)下载</a></p><h2 id="对LFW测试集做预处理"><a href="#对LFW测试集做预处理" class="headerlink" title="对LFW测试集做预处理"></a>对LFW测试集做预处理</h2><p>由于测试集中的图片尺寸是250x250，而facenet要求图片尺寸为160x160，所以需要批量进行处理把尺寸改为160x160<br>这里在 facenet/data/lfw_data/ 目录下创建lfw_160文件夹，用于输出。<br>facenet中已经写好了一个处理尺寸的py文件，路径为 facenet/src/align/align_dataset_mtcnn.py ，运行py程序时需要加上输入和输出路径<br>这里需要先把align_dataset_mtcnn.py文件移动到上一级，即src文件夹中<br>在命令行中的调用方法：<br><code>python align_dataset_mtcnn.py facenet/data/lfw_data/lfw facenet/data/lfw_data/lfw_160 --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25</code><br>我在这里遇到报错：ValueError: Object arrays cannot be loaded when allow_pickle=False，经过查找发现这是numpy 1.16.3 版本问题，最终在npy.io文件中的load函数中加上了allow_pickle=True，问题解决<br>经过一段时间，输出完毕。<br><img src="https://i.loli.net/2019/07/14/5d2b12cf615e154217.png" alt="图片裁剪.png"></p><h2 id="装载训练模型"><a href="#装载训练模型" class="headerlink" title="装载训练模型"></a>装载训练模型</h2><p>如前面所说，这是一个测试模型的库，你可以检测自己的训练模型好坏，也可以检测别人的，这里从下载预先训练好的模型来运行测试，链接给出：<a href="https://drive.google.com/file/d/1EXPBSXwTaqrSC0OhUdXNmKSh9qJUQ55-/view?usp=drive_open" target="_blank" rel="noopener">https://drive.google.com/file/d/1EXPBSXwTaqrSC0OhUdXNmKSh9qJUQ55-/view?usp=drive_open</a> （谷歌云）<br>百度网盘：链接: <a href="https://pan.baidu.com/s/1DGCVRQl5_aYKgczglVKJlQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1DGCVRQl5_aYKgczglVKJlQ</a> 提取码: 2pgx<br>下载完毕解压后，将模型放至 facenet/src/models 目录下。</p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>使用 facenet/src/validate_on_lfw.py 进行测试<br><code>python validate_on_lfw.py facenet/data/lfw_data/lfw_160 models/20180402-114759 --distance_metric 1 --use_flipped_images --subtract_mean --use_fixed_image_standardization</code><br>给出参数列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'lfw_dir'</span>, type=str,</span><br><span class="line">       help=<span class="string">'Path to the data directory containing aligned LFW face patches.'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--lfw_batch_size'</span>, type=int,</span><br><span class="line">       help=<span class="string">'Number of images to process in a batch in the LFW test set.'</span>, default=<span class="number">100</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'model'</span>, type=str, </span><br><span class="line">       help=<span class="string">'Could be either a directory containing the meta_file and ckpt_file or a model protobuf (.pb) file'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--image_size'</span>, type=int,</span><br><span class="line">       help=<span class="string">'Image size (height, width) in pixels.'</span>, default=<span class="number">160</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--lfw_pairs'</span>, type=str,</span><br><span class="line">       help=<span class="string">'The file containing the pairs to use for validation.'</span>, default=<span class="string">'facenet/data/pairs.txt'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--lfw_nrof_folds'</span>, type=int,</span><br><span class="line">       help=<span class="string">'Number of folds to use for cross validation. Mainly used for testing.'</span>, default=<span class="number">10</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--distance_metric'</span>, type=int,</span><br><span class="line">       help=<span class="string">'Distance metric  0:euclidian, 1:cosine similarity.'</span>, default=<span class="number">0</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--use_flipped_images'</span>, </span><br><span class="line">       help=<span class="string">'Concatenates embeddings for the image and its horizontally flipped counterpart.'</span>, action=<span class="string">'store_true'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--subtract_mean'</span>, </span><br><span class="line">       help=<span class="string">'Subtract feature mean before calculating distance.'</span>, action=<span class="string">'store_true'</span>)</span><br><span class="line">   parser.add_argument(<span class="string">'--use_fixed_image_standardization'</span>, </span><br><span class="line">       help=<span class="string">'Performs fixed standardization of images.'</span>, action=<span class="string">'store_true'</span>)</span><br></pre></td></tr></table></figure></p><p>参数依次给出了测试集位置，模型位置，使用余弦相似度量，计算图像的翻转版本…<br>最终给出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Accuracy: 0.99650+-0.00302</span><br><span class="line">Validation rate: 0.98567+-0.00967 @ FAR=0.00100</span><br><span class="line">Area Under Curve (AUC): 1.000</span><br><span class="line">Equal Error Rate (EER): 0.004</span><br></pre></td></tr></table></figure></p><p>遇到了2个问题</p><ol><li><p>运行中报错：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;validate_on_lfw.py&quot;, line 164, in &lt;module&gt;</span><br><span class="line">main(parse_arguments(sys.argv[1:]))</span><br><span class="line">  File &quot;validate_on_lfw.py&quot;, line 73, in main</span><br><span class="line">facenet.load_model(args.model, input_map=input_map)</span><br><span class="line">  File &quot;G:\facenet\src\facenet.py&quot;, line 381, in load_model</span><br><span class="line">saver = tf.train.import_meta_graph(os.path.join(model_exp, meta_file), input_map=input_map)</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\training\saver.py&quot;, line 1435, in import_meta_graph</span><br><span class="line">meta_graph_or_file, clear_devices, import_scope, **kwargs)[0]</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\training\saver.py&quot;, line 1457, in _import_meta_graph_with_return_elements</span><br><span class="line">**kwargs))</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\framework\meta_graph.py&quot;, line 841, in import_scoped_meta_graph_with_return_elements</span><br><span class="line">proto, import_scope=scope_to_prepend_to_names))</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 1794, in from_proto</span><br><span class="line">ret = CondContext(context_def=context_def, import_scope=import_scope)</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 1703, in __init__</span><br><span class="line">self._init_from_proto(context_def, import_scope=import_scope)</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 1735, in _init_from_proto</span><br><span class="line">values_def=context_def.values_def, import_scope=import_scope)</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 1508, in __init__</span><br><span class="line">self._init_values_from_proto(values_def, import_scope=import_scope)</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 1540, in _init_values_from_proto</span><br><span class="line">g.as_graph_element(op)._set_control_flow_context(self)</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\framework\ops.py&quot;, line 3478, in as_graph_element</span><br><span class="line">return self._as_graph_element_locked(obj, allow_tensor, allow_operation)</span><br><span class="line">  File &quot;C:\Users\User\Anaconda3\envs\tensorflow-gpu\lib\site-packages\tensorflow\python\framework\ops.py&quot;, line 3538, in _as_graph_element_locked</span><br><span class="line">&quot;graph.&quot; % repr(name))</span><br><span class="line">KeyError: &quot;The name &apos;decode_image/cond_jpeg/is_png&apos; refers to an Operation not in the graph.&quot;</span><br></pre></td></tr></table></figure><p> 经过搜索，发现解决思路：</p><blockquote><p>Your issue can be solved by adding a name scope around the entire facenet.create_input_pipeline function.<br> The bug is because the code uses import_meta_graph to create the graph on top of an existing graph. This usage is error-prone due to potential name conflicts.</p></blockquote><p> 最终在在facenet.py中的create_input_pipeline函数下添加<br> <code>with tf.name_scope(&quot;tempscope&quot;):</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">def create_input_pipeline(input_queue, image_size, nrof_preprocess_threads, batch_size_placeholder):</span><br><span class="line">with tf.name_scope(&quot;tempscope&quot;):</span><br><span class="line">images_and_labels_list = []</span><br><span class="line">for _ in range(nrof_preprocess_threads):</span><br><span class="line">filenames, label, control = input_queue.dequeue()</span><br><span class="line">images = []</span><br><span class="line">for filename in tf.unstack(filenames):</span><br><span class="line">file_contents = tf.read_file(filename)</span><br><span class="line">image = tf.image.decode_image(file_contents, 3)</span><br><span class="line">image = tf.cond(get_control_flag(control[0], RANDOM_ROTATE),</span><br><span class="line">lambda:tf.py_func(random_rotate_image, [image], tf.uint8), </span><br><span class="line">lambda:tf.identity(image))</span><br><span class="line">image = tf.cond(get_control_flag(control[0], RANDOM_CROP), </span><br><span class="line">lambda:tf.random_crop(image, image_size + (3,)), </span><br><span class="line">lambda:tf.image.resize_image_with_crop_or_pad(image, image_size[0], image_size[1]))</span><br><span class="line">image = tf.cond(get_control_flag(control[0], RANDOM_FLIP),</span><br><span class="line">lambda:tf.image.random_flip_left_right(image),</span><br><span class="line">lambda:tf.identity(image))</span><br><span class="line">image = tf.cond(get_control_flag(control[0], FIXED_STANDARDIZATION),</span><br><span class="line">lambda:(tf.cast(image, tf.float32) - 127.5)/128.0,</span><br><span class="line">lambda:tf.image.per_image_standardization(image))</span><br><span class="line">image = tf.cond(get_control_flag(control[0], FLIP),</span><br><span class="line">lambda:tf.image.flip_left_right(image),</span><br><span class="line">lambda:tf.identity(image))</span><br><span class="line">#pylint: disable=no-member</span><br><span class="line">image.set_shape(image_size + (3,))</span><br><span class="line">images.append(image)</span><br><span class="line">images_and_labels_list.append([images, label])</span><br><span class="line"></span><br><span class="line">image_batch, label_batch = tf.train.batch_join(</span><br><span class="line">images_and_labels_list, batch_size=batch_size_placeholder, </span><br><span class="line">shapes=[image_size + (3,), ()], enqueue_many=True,</span><br><span class="line">capacity=4 * nrof_preprocess_threads * 100,</span><br><span class="line">allow_smaller_final_batch=True)</span><br><span class="line"></span><br><span class="line">return image_batch, label_batch</span><br></pre></td></tr></table></figure><p> 问题解决。</p></li><li><p>运行完程序后报错</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2019-07-14 15:30:33.575898: W tensorflow/core/kernels/queue_base.cc:285] _2_FIFOQueueV2_1: Skipping cancelled dequeue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.582318: W tensorflow/core/kernels/queue_base.cc:285] _2_FIFOQueueV2_1: Skipping cancelled dequeue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.590200: W tensorflow/core/kernels/queue_base.cc:285] _2_FIFOQueueV2_1: Skipping cancelled dequeue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.596049: W tensorflow/core/kernels/queue_base.cc:285] _2_FIFOQueueV2_1: Skipping cancelled dequeue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.600492: W tensorflow/core/kernels/queue_base.cc:277] _4_input_producer: Skipping cancelled enqueue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.609625: W tensorflow/core/kernels/queue_base.cc:285] _0_FIFOQueueV2: Skipping cancelled dequeue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.616131: W tensorflow/core/kernels/queue_base.cc:285] _0_FIFOQueueV2: Skipping cancelled dequeue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.620320: W tensorflow/core/kernels/queue_base.cc:285] _0_FIFOQueueV2: Skipping cancelled dequeue attempt with queue not closed</span><br><span class="line">2019-07-14 15:30:33.627709: W tensorflow/core/kernels/queue_base.cc:285] _0_FIFOQueueV2: Skipping cancelled dequeue attempt with queue not closed</span><br></pre></td></tr></table></figure><p> 网上搜索表明这或许与tf会忽略非主线程的运行出错有关，但更多倾向于这是版本错误，这些错误可以忽略，至少现在这些错误没有造成什么负面影响。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> training </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OCR</title>
      <link href="/2019/07/13/OCR/"/>
      <url>/2019/07/13/OCR/</url>
      
        <content type="html"><![CDATA[<p>记录一次简单的OCR安装过程<br><a id="more"></a></p><h2 id="需要环境"><a href="#需要环境" class="headerlink" title="需要环境"></a>需要环境</h2><ul><li>python 3.6+</li><li>python PTL库（自带）</li><li>文字识别引擎：pytesseract(python模块)</li><li>Tesseract Ocr 光学文字识别引擎</li></ul><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><ol><li>安装python模块<blockquote><p>pip install pytesseract</p></blockquote></li><li>安装tesseract orc<br> 下载地址：(<a href="https://github.com/UB-Mannheim/tesseract/wiki" target="_blank" rel="noopener">https://github.com/UB-Mannheim/tesseract/wiki</a>) <label style="color:red">注意选择中文包</label></li><li><p>配置tesseract运行文件<br> 之前python安装的pytesseract.py中找到</p><blockquote><p>tesseract_cmd = ‘tesseract’</p></blockquote><p> 改成：</p><blockquote><p>tesseract_cmd = ‘[你的安装路径]/Tesseract-OCR/tesseract.exe’</p></blockquote></li><li>代码实现 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line">path = <span class="string">"img\\text-img.png"</span></span><br><span class="line"></span><br><span class="line">text = pytesseract.image_to_string(Image.open(path), lang=<span class="string">'chi_sim'</span>)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure></li></ol><p>实现效果：<br><img src="https://i.loli.net/2019/07/13/5d2997acb3eb850473.png" alt="orcshow.png"></p><h2 id="训练自己的数据模型"><a href="#训练自己的数据模型" class="headerlink" title="训练自己的数据模型"></a>训练自己的数据模型</h2><p>像上面这样没有任何数据模型的训练，也就只能识别一些无干扰，字迹清楚的文字，如果要识别一些特意增加识别难度的图片，譬如验证码，或者是一些手写字体，就需要经过训练来提升准确度了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> training </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first_blog</title>
      <link href="/2019/07/05/first-blog/"/>
      <url>/2019/07/05/first-blog/</url>
      
        <content type="html"><![CDATA[<p>万事开头难<br> <a id="more"></a></p><h1 id="记这次痛苦的安装经历"><a href="#记这次痛苦的安装经历" class="headerlink" title="记这次痛苦的安装经历"></a>记这次痛苦的安装经历</h1><h2 id="选择hexo"><a href="#选择hexo" class="headerlink" title="选择hexo"></a>选择hexo</h2><p> 记得是有一次看到了一个大佬的博客域名中居然有github的字样，有些好奇，便去网上搜了一下，了解了静态博客的写法和如何在github上实现，依葫芦画瓢做完，成功创建了仓库。<br> 接下来便是选择渲染的组件了，GitHub推荐的是jelly，因为我对这些几乎一无所知，所以最开始便跟着GitHub的推荐走，但后面发现jelly不适合在windows平台下工作，而有人又推荐了hexo，仔细看了一下，感觉不错，就又按着hexo的教程安装了下来。</p><h2 id="确定主题"><a href="#确定主题" class="headerlink" title="确定主题"></a>确定主题</h2><p> 安装完成后才发现自己的预览界面和其他博客比起来差了不少，遂去网上搜索相关资料，发现是各路大神都是使用的自定义主题，一路看过去，都比现在我这默认的要好得多，于是乎又开始对主题的搜索。<br> 搜索着搜索着，看到一个butterfly的主题感觉不错，便尝试着用了一下，但中途因为配置问题一直没有办法预览，butterfly的文档又说自己是由melody迭代而来，并给出了melody的文档，我便顺势改成了这个主题。<br> 按照主题中所说</p><blockquote><p>   站点配置文件_config.yml是 hexo 工作目录下的主配置文件<br>  melody.yml 是 theme-melody 的配置文件。它需要你手动将主题目录下的_config.yml文件复制到 hexo 工作目录的source/_data/melody.yml中。如果文件或者文件夹不存在，需要手动创建。</p></blockquote><p> 按照文档做应该没错，于是我就把_config.yml文件中的内容直接复制到melody.yml中了，事实证明，这是完全错误的，幸好作者给出了<a href="https://github.com/Molunerfinn/Molunerfinn.github.io/blob/hexo/source/_data/melody.yml" target="_blank" rel="noopener">自己博客</a> 的配置文件，一阵对照才发现二者基本没有一样的东西（汗），按着作者的配置我也开始一一对照，一对照就发现它的元素实在太多，便先加入了最基本的东西，然后便是无尽的报错，慢慢看下去，报什么错便检查那个出错的语句，看看是什么没有配置，再从作者的实例中复制过来加入，最终得出了能够使页面正常运行的最小配置：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># html lang</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main menu navigation</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  Archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  Tags:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  Categories:</span> <span class="string">/categories</span></span><br><span class="line"></span><br><span class="line"><span class="attr">top_img:</span> <span class="attr">https://i.loli.net/2019/07/06/5d2043345129b66140.png</span>  <span class="comment"># false / 具体图片url</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme_color:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># or false -&gt; to use the default theme</span></span><br><span class="line"><span class="attr">  main:</span> <span class="string">"#000"</span></span><br><span class="line"><span class="attr">  paginator:</span> <span class="string">"#000"</span></span><br><span class="line"><span class="attr">  button_hover:</span> <span class="string">"#49B1F5"</span></span><br><span class="line"><span class="attr">  text_selection:</span> <span class="string">"#000"</span></span><br><span class="line"><span class="attr">  link_color:</span> <span class="string">"#000"</span></span><br><span class="line"><span class="attr">  hr_color:</span> <span class="string">"#000"</span></span><br><span class="line"><span class="attr">  meta_color:</span> <span class="string">"#000"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># PWA</span></span><br><span class="line"><span class="attr">pwa:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  manifest:</span> <span class="string">/manifest.json</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span>  <span class="comment"># default/darker/pale night/light</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># algolia_search</span></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  hits:</span></span><br><span class="line"><span class="attr">    per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line"><span class="attr">    hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span></span><br><span class="line"><span class="attr">    hits_stats:</span> <span class="string">"$&#123;hits&#125; results found in $&#123;time&#125; ms"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stylesheets loaded in the &lt;head&gt;</span></span><br><span class="line"><span class="attr">stylesheets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/css/index.css</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># scripts loaded in the end of the body</span></span><br><span class="line"><span class="attr">scripts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/utils.js</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/fancybox.js</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/sidebar.js</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/copy.js</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/fireworks.js</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/transition.js</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/scroll.js</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/js/head.js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  date_type:</span> <span class="string">created</span> <span class="comment"># created or updated </span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cdn:</span></span><br><span class="line"><span class="attr">    css:</span></span><br><span class="line">        <span class="comment">#fontawesome: https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css</span></span><br><span class="line"><span class="attr">        fontawesomeV5:</span> <span class="attr">https://use.fontawesome.com/releases/v5.3.1/css/all.css</span></span><br><span class="line"><span class="attr">    js:</span></span><br><span class="line"><span class="attr">        anime:</span> <span class="attr">https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js</span></span><br><span class="line"><span class="attr">        jquery:</span> <span class="attr">https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js</span></span><br><span class="line"><span class="attr">        fancybox:</span> <span class="attr">https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js</span></span><br><span class="line"><span class="attr">        velocity:</span> <span class="attr">https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js</span></span><br><span class="line"><span class="attr">        velocity-ui:</span> <span class="attr">https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    number:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">addThis:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    pubid:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    shortname:</span> <span class="string">molunerfinn</span></span><br><span class="line"><span class="attr">    count:</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">ICP:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    text:</span> </span><br><span class="line">    </span><br><span class="line"><span class="comment"># busuanzi count for PV / UV in site</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_uv_footer:</span> </span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_pv_footer:</span> </span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  page_pv_footer:</span></span><br></pre></td></tr></table></figure><p>终于可以在浏览器中显示界面了！</p><p>接着看文档，下一步便是我最有兴趣的“top+img”，先在腾讯云建了一个图床，再毫不犹豫地把自己的2077的图翻出来，上传并替换地址，但是效果并不理想。。最终还是选择了一个阿尔卑斯山的图片，还是挺满意的</p><p>感觉自己又学到了很多东西，遂写下自己的第一篇正式的博客，以后有时间就回发掘更多的新功能，丰富自己的博客空间。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/26/hello-world/"/>
      <url>/2019/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>!<br><a id="more"></a><br>This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
